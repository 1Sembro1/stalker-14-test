using Content.Client.UserInterface.Controls;
using Content.Shared._Stalker.Bands; // Assuming shared state/messages are here
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using System;
using System.Collections.Generic; // For List
using Robust.Shared.Utility; // For FormattedMessage

namespace Content.Client._Stalker.Bands.UI
{
    /// <summary>
    /// Code-behind for the BandsManagingWindow.xaml UI.
    /// Handles displaying band information and member list,
    /// and provides events for user interactions like adding/removing members.
    /// </summary>
    [GenerateTypedNameReferences]
    public sealed partial class BandsManagingWindow : FancyWindow
    {
        // Event invoked when the "Add Member" button is pressed. Passes the entered name.
        public event Action<string>? OnAddMemberButtonPressed;
        // Event invoked when a "Remove" button next to a member is pressed. Passes the member's PlayerUserId.
        public event Action<Guid>? OnRemoveMemberButtonPressed;

        public BandsManagingWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            AddMemberButton.OnPressed += OnAddMemberPressed;
        }

        /// <summary>
        /// Called when the main "Add Member" button is pressed.
        /// Invokes the OnAddMemberButtonPressed event with the text from the input field.
        /// </summary>
        private void OnAddMemberPressed(BaseButton.ButtonEventArgs args)
        {
            OnAddMemberButtonPressed?.Invoke(AddMemberLineEdit.Text);
            AddMemberLineEdit.Text = string.Empty; // Clear the input field after pressing
        }

        /// <summary>
        /// Updates the window's display based on the state received from the server.
        /// </summary>
        /// <param name="state">The state object containing band info and member list.</param>
        public void UpdateState(BandsManagingBoundUserInterfaceState state)
        {
            // Update Band Info
            BandNameLabel.Text = state.BandName ?? Loc.GetString("bands-managing-window-band-name-unknown"); // Localization needed
            BandMemberCountLabel.Text = $"{state.Members.Count} / {state.MaxMembers}";

            // Update Members List
            MembersList.Children.Clear(); // Clear previous entries

            if (state.Members.Count == 0)
            {
                MembersList.Children.Add(NoMembersLabel);
                NoMembersLabel.Visible = true;
            }
            else
            {
                NoMembersLabel.Visible = false;
                foreach (var member in state.Members)
                {
                    var memberBox = new BoxContainer
                    {
                        Orientation = LayoutOrientation.Horizontal,
                        HorizontalExpand = true,
                        Margin = new Thickness(0, 2) // Add some vertical spacing
                    };

                    var nameLabel = new Label
                    {
                        Text = member.PlayerName, // Assuming PlayerName is part of BandMemberInfo
                        HorizontalExpand = true,
                    };

                    var removeButton = new Button
                    {
                        Text = Loc.GetString("bands-managing-window-remove-button"), // Localization needed
                        MinWidth = 80,
                        HorizontalAlignment = HAlignment.Right
                    };

                    // Store the member's ID to pass it when the button is clicked
                    var memberId = member.PlayerUserId; // Assuming PlayerUserId is part of BandMemberInfo
                    removeButton.OnPressed += _ => OnRemoveMemberButtonPressed?.Invoke(memberId);

                    // Disable remove button for the leader themselves? (Based on state.IsLeader and memberId == state.LeaderId)
                    // removeButton.Disabled = state.IsLeader &amp;&amp; memberId == state.LeaderId; // Example logic

                    memberBox.AddChild(nameLabel);
                    memberBox.AddChild(removeButton);

                    MembersList.AddChild(memberBox);
                }
            }

            // Update permissions (e.g., disable add/remove buttons if not leader)
            var canManage = state.CanManage; // Assuming CanManage property indicates if the player can add/remove
            AddMemberLineEdit.Editable = canManage;
            AddMemberButton.Disabled = !canManage;
            // We might need to disable individual remove buttons based on hierarchy/permissions too
            foreach (var child in MembersList.Children)
            {
                if (child is BoxContainer box &amp;&amp; box.ChildCount > 1 &amp;&amp; box.GetChild(1) is Button btn)
                {
                     // Keep remove button enabled for now, server-side validation is key.
                     // btn.Disabled = !canManage; // Or more complex logic
                }
            }
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
            if (disposing)
            {
                AddMemberButton.OnPressed -= OnAddMemberPressed;
                // Unsubscribe remove buttons if needed, though clearing children might handle it
            }
        }
    }
}
